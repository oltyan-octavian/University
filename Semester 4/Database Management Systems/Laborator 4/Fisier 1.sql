Use Showroom
go


-- Dirty Reads--
BEGIN TRANSACTION 
UPDATE Cars SET Price=7000 WHERE CarID=1;
WAITFOR DELAY '00:00:05'
ROLLBACK TRANSACTION
INSERT INTO Lab4LoggingTable(operationType, executionTime, logMessage) VALUES('Dirty Reads', CURRENT_TIMESTAMP, 'Rollback successfully')



-- Non Repetable Reads 
--Doesn't work
SET TRANSACTION ISOLATION LEVEL READ COMMITTED
BEGIN TRANSACTION
SELECT * FROM Cars;
WAITFOR DELAY '00:00:06'
SELECT * FROM Cars;
COMMIT TRANSACTION
--Works
SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION
SELECT * FROM Cars;
WAITFOR DELAY '00:00:10'
SELECT * FROM Cars;
COMMIT TRANSACTION



-- Phantom Reads --
--Doesn't work
SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION;
SELECT * FROM Cars WHERE CarID BETWEEN 1 AND 100;
WAITFOR DELAY '00:00:07';
SELECT * FROM Cars WHERE CarID BETWEEN 1 AND 100;
COMMIT TRAN;
--Works
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
BEGIN TRANSACTION;
SELECT * FROM Cars WHERE CarID BETWEEN 1 AND 100;
WAITFOR DELAY '00:00:07';
SELECT * FROM Cars WHERE CarID BETWEEN 1 AND 100;
COMMIT TRAN;
INSERT INTO Lab4LoggingTable(operationType, executionTime, logMessage) VALUES('PHANTOM READ INSERT', CURRENT_TIMESTAMP, 'Phantom Reads Succeeded')



--DeadLock--
SELECT * FROM Salespeople
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
BEGIN TRAN;
UPDATE Cars SET QuantityInStock=350 WHERE CarID = 2;
WAITFOR DELAY '00:00:05';
UPDATE Salespeople SET FirstName='ANDREI' WHERE SalespersonID=300;
COMMIT TRAN;
INSERT INTO Lab4LoggingTable(operationType, executionTime, logMessage) VALUES('DEADLOCK', CURRENT_TIMESTAMP, 'First transaction')

